from __future__ import print_function, division

# USAGE
# NOTE: When using an input video file, speeds will be inaccurate
# because OpenCV can't throttle FPS according to the framerate of the
# video. This script is for development purposes only.
#

# python speed_estimation_dl_video_openvino_demo.py   -i sample_data/cars.mp4 -m frozen_darknet_yolov3_model.xml  -d MYRIAD --labels coco.names  -r

# inform the user about framerates and speeds
print("[INFO] NOTE: When using an input video file, speeds will be " \
	"inaccurate because OpenCV can't throttle FPS according to the " \
	"framerate of the video. This script is for development purposes " \
	"only.")

# import the necessary packages
from pyimagesearch.centroidtracker import CentroidTracker
from pyimagesearch.trackableobject import TrackableObject
from pyimagesearch.utils import Conf
from imutils.video import VideoStream
from imutils.io import TempFile
from imutils.video import FPS
from datetime import datetime
from threading import Thread
import numpy as np
import argparse
import dropbox
import imutils
import dlib
# import time
import cv2
import os, sys

from argparse import ArgumentParser, SUPPRESS
from math import exp as exp
from time import time
import logging
from openvino.inference_engine import IECore
from lib_yolov3_async import entry_index, scale_bbox, build_argparser, parse_yolo_region, YoloParams, intersection_over_union

# logging.basicConfig(format="[ %(levelname)s ] %(message)s", level=logging.INFO, stream=sys.stdout)
logging.basicConfig(format="[ %(levelname)s ] %(message)s", level=logging.CRITICAL, stream=sys.stdout)
log = logging.getLogger()



def upload_file(tempFile, client, imageID):
	# upload the image to Dropbox and cleanup the tempory image
	print("[INFO] uploading {}...".format(imageID))
	path = "/{}.jpg".format(imageID)
	client.files_upload(open(tempFile.path, "rb").read(), path)
	tempFile.cleanup()

# # construct the argument parser and parse the arguments
# ap = argparse.ArgumentParser()
# ap.add_argument("-c", "--conf", required=True,
# 	help="Path to the input configuration file")
# ap.add_argument("-i", "--input", required=True,
# 	help="Path to the input video file")
# args = vars(ap.parse_args())

# load the configuration file
# conf = Conf(args["conf"])


conf = Conf("config/config.json")

# initialize the list of class labels MobileNet SSD was trained to
# detect
CLASSES = ["background", "aeroplane", "bicycle", "bird", "boat",
	"bottle", "bus", "car", "cat", "chair", "cow", "diningtable",
	"dog", "horse", "motorbike", "person", "pottedplant", "sheep",
	"sofa", "train", "tvmonitor"]

# check to see if the Dropbox should be used
if conf["use_dropbox"]:
	# connect to dropbox and start the session authorization process
	client = dropbox.Dropbox(conf["dropbox_access_token"])
	print("[SUCCESS] dropbox account linked")

# # load our serialized model from disk
# print("[INFO] loading model...")
# net = cv2.dnn.readNetFromCaffe(conf["prototxt_path"],
# 	conf["model_path"])
#net.setPreferableTarget(cv2.dnn.DNN_TARGET_MYRIAD)

# initialize the video stream and allow the camera sensor to warmup
print("[INFO] warming up camera...")
#vs = VideoStream(src=0).start()
# vs = cv2.VideoCapture(args["input"])
vs = cv2.VideoCapture("sample_data/cars.mp4")

# time.sleep(2.0)

# initialize the frame dimensions (we'll set them as soon as we read
# the first frame from the video)
H = None
W = None

# instantiate our centroid tracker, then initialize a list to store
# each of our dlib correlation trackers, followed by a dictionary to
# map each unique object ID to a TrackableObject
ct = CentroidTracker(maxDisappeared=conf["max_disappear"],
	maxDistance=conf["max_distance"])
trackers = []
trackableObjects = {}

# keep the count of total number of frames
totalFrames = 0

# initialize the log file
logFile = None



# initialize the list of various points used to calculate the avg of
# the vehicle speed
points = [("A", "B"), ("B", "C"), ("C", "D")]

# start the frames per second throughput estimator
fps = FPS().start()

##########################  prepare from lib_yolov3_async  ###################################
is_async_mode = False
wait_key_code = 0
args = build_argparser().parse_args()

# ------------- 1. Plugin initialization for specified device and load extensions library if specified -------------
log.info("Creating Inference Engine...")
ie = IECore()
if args.cpu_extension and 'CPU' in args.device:
	ie.add_extension(args.cpu_extension, "CPU")

# -------------------- 2. Reading the IR generated by the Model Optimizer (.xml and .bin files) --------------------
log.info("Loading network")
net = ie.read_network(args.model, os.path.splitext(args.model)[0] + ".bin")

# ---------------------------------- 3. Load CPU extension for support specific layer ------------------------------
if "CPU" in args.device:
	supported_layers = ie.query_network(net, "CPU")
	not_supported_layers = [l for l in net.layers.keys() if l not in supported_layers]
	if len(not_supported_layers) != 0:
		log.error("Following layers are not supported by the plugin for specified device {}:\n {}".
		          format(args.device, ', '.join(not_supported_layers)))
		log.error("Please try to specify cpu extensions library path in sample's command line parameters using -l "
		          "or --cpu_extension command line argument")
		sys.exit(1)

assert len(net.inputs.keys()) == 1, "Sample supports only YOLO V3 based single input topologies"

# ---------------------------------------------- 4. Preparing inputs -----------------------------------------------
log.info("Preparing inputs")
input_blob = next(iter(net.inputs))

#  Defaulf batch_size is 1
net.batch_size = 1

# Read and pre-process input images
n, c, h, w = net.inputs[input_blob].shape

if args.labels:
	with open(args.labels, 'r') as f:
		labels_map = [x.strip() for x in f]
else:
	labels_map = None

print("classes:", labels_map)
input_stream = 0 if args.input == "cam" else args.input

is_async_mode = True
cap = cv2.VideoCapture(input_stream)
number_input_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
number_input_frames = 1 if number_input_frames != -1 and number_input_frames < 0 else number_input_frames

wait_key_code = 1

# Number of frames in picture is 1 and this will be read in cycle. Sync mode is default value for this case
if number_input_frames != 1:
	ret, frame = cap.read()
else:
	is_async_mode = False
	wait_key_code = 0

# ----------------------------------------- 5. Loading model to the plugin -----------------------------------------
log.info("Loading model to the plugin")
exec_net = ie.load_network(network=net, num_requests=2, device_name=args.device)

cur_request_id = 0
# next_request_id = 1
render_time = 0
parsing_time = 0

# ----------------------------------------------- 6. Doing inference -----------------------------------------------
log.info("Starting inference...")
print("To close the application, press 'CTRL+C' here or switch to the output window and press ESC key")
print("To switch between sync/async modes, press TAB key in the output window")
##########################  end of prepare from lib_yolov3_async  ###################################


# loop over the frames of the stream
while True:
	# grab the next frame from the stream, store the current
	# timestamp, and store the new date
	ret, frame  = vs.read()
	ts = datetime.now()
	newDate = ts.strftime("%m-%d-%y")

	# check if the frame is None, if so, break out of the loop
	if frame is None:
		break

	# if the log file has not been created or opened
	if logFile is None:
		# build the log file path and create/open the log file
		logPath = os.path.join(conf["output_path"], conf["csv_name"])
		logFile = open(logPath, mode="a")

		# set the file pointer to end of the file
		pos = logFile.seek(0, os.SEEK_END)

		# if we are using dropbox and this is a empty log file then
		# write the column headings
		if conf["use_dropbox"] and pos == 0:
			logFile.write("Year,Month,Day,Time,Speed (in MPH),ImageID\n")

		# otherwise, we are not using dropbox and this is a empty log
		# file then write the column headings
		elif pos == 0:
			logFile.write("Year,Month,Day,Time (in MPH),Speed\n")



	#
	# # resize the frame
	# frame = imutils.resize(frame, width=conf["frame_width"])
	# rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
	#
	# # if the frame dimensions are empty, set them
	# if W is None or H is None:
	# 	(H, W) = frame.shape[:2]
	# 	meterPerPixel = conf["distance"] / W
	#
	# # initialize our list of bounding box rectangles returned by
	# # either (1) our object detector or (2) the correlation trackers
	# rects = []
	#
	# # check to see if we should run a more computationally expensive
	# # object detection method to aid our tracker
	# if totalFrames % conf["track_object"] == 0:
	# 	# initialize our new set of object trackers
	# 	trackers = []
	#
	# 	# convert the frame to a blob and pass the blob through the
	# 	# network and obtain the detections
	# 	blob = cv2.dnn.blobFromImage(frame, size=(300, 300),
	# 		ddepth=cv2.CV_8U)
	# 	net.setInput(blob, scalefactor=1.0/127.5, mean=[127.5,
	# 		127.5, 127.5])
	# 	detections = net.forward()
	#
	# 	# loop over the detections
	# 	for i in np.arange(0, detections.shape[2]):
	# 		# extract the confidence (i.e., probability) associated
	# 		# with the prediction
	# 		confidence = detections[0, 0, i, 2]
	#
	# 		# filter out weak detections by ensuring the `confidence`
	# 		# is greater than the minimum confidence
	# 		if confidence > conf["confidence"]:
	# 			# extract the index of the class label from the
	# 			# detections list
	# 			idx = int(detections[0, 0, i, 1])
	#
	# 			# if the class label is not a car, ignore it
	# 			if CLASSES[idx] != "car":
	# 				continue
	#
	# 			# compute the (x, y)-coordinates of the bounding box
	# 			# for the object
	# 			box = detections[0, 0, i, 3:7] * np.array([W, H, W, H])
	# 			(startX, startY, endX, endY) = box.astype("int")
	#
	# 			# construct a dlib rectangle object from the bounding
	# 			# box coordinates and then start the dlib correlation
	# 			# tracker
	# 			tracker = dlib.correlation_tracker()
	# 			rect = dlib.rectangle(startX, startY, endX, endY)
	# 			tracker.start_track(rgb, rect)
	#
	# 			# add the tracker to our list of trackers so we can
	# 			# utilize it during skip frames
	# 			trackers.append(tracker)




	# todo: bgr => rgb??
	rgb = frame

	# if the frame dimensions are empty, set them
	if W is None or H is None:
		(H, W) = frame.shape[:2]
		meterPerPixel = conf["distance"] / W

	# initialize our list of bounding box rectangles returned by
	# either (1) our object detector or (2) the correlation trackers
	rects = []

	# check to see if we should run a more computationally expensive
	# object detection method to aid our tracker
	if totalFrames % conf["track_object"] == 0:
		# initialize our new set of object trackers
		trackers = []

		# todo: yolov3 object detection

		request_id = cur_request_id
		in_frame = cv2.resize(frame, (w, h))

		# resize input_frame to network size
		in_frame = in_frame.transpose((2, 0, 1))  # Change data layout from HWC to CHW
		in_frame = in_frame.reshape((n, c, h, w))

		# Start inference
		start_time = time()
		exec_net.start_async(request_id=request_id, inputs={input_blob: in_frame})
		det_time = time() - start_time

		# Collecting object detection results
		objects = list()
		if exec_net.requests[cur_request_id].wait(-1) == 0:
			output = exec_net.requests[cur_request_id].outputs
			start_time = time()
			for layer_name, out_blob in output.items():
				# out_blob = out_blob.reshape(net.layers[net.layers[layer_name].parents[0]].shape)
				out_blob = out_blob.reshape(net.layers[net.layers[layer_name].parents[0]].out_data[0].shape)
				layer_params = YoloParams(net.layers[layer_name].params, out_blob.shape[2])
				log.info("Layer {} parameters: ".format(layer_name))
				layer_params.log_params()
				objects += parse_yolo_region(out_blob, in_frame.shape[2:],
				                             frame.shape[:-1], layer_params,
				                             args.prob_threshold)
			parsing_time = time() - start_time

		# Filtering overlapping boxes with respect to the --iou_threshold CLI parameter
		objects = sorted(objects, key=lambda obj : obj['confidence'], reverse=True)

		for i in range(len(objects)):
			if objects[i]['confidence'] == 0:
				continue
			for j in range(i + 1, len(objects)):
				if intersection_over_union(objects[i], objects[j]) > args.iou_threshold:  # prob_threshold: 0.5
					objects[j]['confidence'] = 0

		# Drawing objects with respect to the --prob_threshold CLI parameter
		objects = [obj for obj in objects if obj['confidence'] >= args.prob_threshold]

		if len(objects) and args.raw_output_message:
			log.info("\nDetected boxes for batch {}:".format(1))
			log.info(" Class ID | Confidence | XMIN | YMIN | XMAX | YMAX | COLOR ")

		print(len(objects), "objects found")

		origin_im_size = frame.shape[:-1]
		for obj in objects:
			# Validation bbox of detected object
			if obj['xmax'] > origin_im_size[1] or obj['ymax'] > origin_im_size[0] or obj['xmin'] < 0 or obj['ymin'] < 0:
				continue
			color = (int(min(obj['class_id'] * 12.5, 255)),
			         min(obj['class_id'] * 7, 255), min(obj['class_id'] * 5, 255))
			det_label = labels_map[obj['class_id']] if labels_map and len(labels_map) >= obj['class_id'] else \
				str(obj['class_id'])

			if args.raw_output_message:
				log.critical(
					"{:^9} | {:10f} | {:4} | {:4} | {:4} | {:4} | {} ".format(det_label, obj['confidence'], obj['xmin'],
					                                                          obj['ymin'], obj['xmax'], obj['ymax'],
					                                                          color))

			cv2.rectangle(frame, (obj['xmin'], obj['ymin']), (obj['xmax'], obj['ymax']), color, 2)
			cv2.putText(frame,
			            "#" + det_label + ' ' + str(round(obj['confidence'] * 100, 1)) + ' %',
			            (obj['xmin'], obj['ymin'] - 7), cv2.FONT_HERSHEY_COMPLEX, 0.6, color, 1)

		# Draw performance stats over frame
		inf_time_message = "Inference time: N\A for async mode" if is_async_mode else \
			"Inference time: {:.3f} ms".format(det_time * 1e3)
		render_time_message = "OpenCV rendering time: {:.3f} ms".format(render_time * 1e3)
		async_mode_message = "Async mode is on. Processing request {}".format(cur_request_id) if is_async_mode else \
			"Async mode is off. Processing request {}".format(cur_request_id)
		parsing_message = "YOLO parsing time is {:.3f} ms".format(parsing_time * 1e3)

		cv2.putText(frame, inf_time_message, (15, 15), cv2.FONT_HERSHEY_COMPLEX, 0.5, (200, 10, 10), 1)
		cv2.putText(frame, render_time_message, (15, 45), cv2.FONT_HERSHEY_COMPLEX, 0.5, (10, 10, 200), 1)
		cv2.putText(frame, async_mode_message, (10, int(origin_im_size[0] - 20)), cv2.FONT_HERSHEY_COMPLEX, 0.5,
		            (10, 10, 200), 1)
		cv2.putText(frame, parsing_message, (15, 30), cv2.FONT_HERSHEY_COMPLEX, 0.5, (10, 10, 200), 1)





		# # construct a dlib rectangle object from the bounding
		# # box coordinates and then start the dlib correlation
		# # tracker
		# tracker = dlib.correlation_tracker()
		# rect = dlib.rectangle(startX, startY, endX, endY)
		# tracker.start_track(rgb, rect)
		#
		# # add the tracker to our list of trackers so we can
		# # utilize it during skip frames
		# trackers.append(tracker)

	# otherwise, we should utilize our object *trackers* rather than
	# object *detectors* to obtain a higher frame processing
	# throughput
	else:
		# loop over the trackers
		for tracker in trackers:
			# update the tracker and grab the updated position
			tracker.update(rgb)
			pos = tracker.get_position()

			# unpack the position object
			startX = int(pos.left())
			startY = int(pos.top())
			endX = int(pos.right())
			endY = int(pos.bottom())

			# add the bounding box coordinates to the rectangles list
			rects.append((startX, startY, endX, endY))

	# use the centroid tracker to associate the (1) old object
	# centroids with (2) the newly computed object centroids
	objects = ct.update(rects)

	# loop over the tracked objects
	for (objectID, centroid) in objects.items():
		# check to see if a trackable object exists for the current
		# object ID
		to = trackableObjects.get(objectID, None)

		# if there is no existing trackable object, create one
		if to is None:
			to = TrackableObject(objectID, centroid)

		# otherwise, if there is a trackable object and its speed has
		# not yet been estimated then estimate it
		elif not to.estimated:
			# check if the direction of the object has been set, if
			# not, calculate it, and set it
			if to.direction is None:
				y = [c[0] for c in to.centroids]
				direction = centroid[0] - np.mean(y)
				to.direction = direction

			# if the direction is positive (indicating the object
			# is moving from left to right)
			if to.direction > 0:
				# check to see if timestamp has been noted for
				# point A
				if to.timestamp["A"] == 0 :
					# if the centroid's x-coordinate is greater than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] > conf["speed_estimation_zone"]["A"]:
						to.timestamp["A"] = ts
						to.position["A"] = centroid[0]

				# check to see if timestamp has been noted for
				# point B
				elif to.timestamp["B"] == 0:
					# if the centroid's x-coordinate is greater than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] > conf["speed_estimation_zone"]["B"]:
						to.timestamp["B"] = ts
						to.position["B"] = centroid[0]

				# check to see if timestamp has been noted for
				# point C
				elif to.timestamp["C"] == 0:
					# if the centroid's x-coordinate is greater than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] > conf["speed_estimation_zone"]["C"]:
						to.timestamp["C"] = ts
						to.position["C"] = centroid[0]

				# check to see if timestamp has been noted for
				# point D
				elif to.timestamp["D"] == 0:
					# if the centroid's x-coordinate is greater than
					# the corresponding point then set the timestamp
					# as current timestamp, set the position as the
					# centroid's x-coordinate, and set the last point
					# flag as True
					if centroid[0] > conf["speed_estimation_zone"]["D"]:
						to.timestamp["D"] = ts
						to.position["D"] = centroid[0]
						to.lastPoint = True

			# if the direction is negative (indicating the object
			# is moving from right to left)
			elif to.direction < 0:
				# check to see if timestamp has been noted for
				# point D
				if to.timestamp["D"] == 0 :
					# if the centroid's x-coordinate is lesser than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] < conf["speed_estimation_zone"]["D"]:
						to.timestamp["D"] = ts
						to.position["D"] = centroid[0]

				# check to see if timestamp has been noted for
				# point C
				elif to.timestamp["C"] == 0:
					# if the centroid's x-coordinate is lesser than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] < conf["speed_estimation_zone"]["C"]:
						to.timestamp["C"] = ts
						to.position["C"] = centroid[0]

				# check to see if timestamp has been noted for
				# point B
				elif to.timestamp["B"] == 0:
					# if the centroid's x-coordinate is lesser than
					# the corresponding point then set the timestamp
					# as current timestamp and set the position as the
					# centroid's x-coordinate
					if centroid[0] < conf["speed_estimation_zone"]["B"]:
						to.timestamp["B"] = ts
						to.position["B"] = centroid[0]

				# check to see if timestamp has been noted for
				# point A
				elif to.timestamp["A"] == 0:
					# if the centroid's x-coordinate is lesser than
					# the corresponding point then set the timestamp
					# as current timestamp, set the position as the
					# centroid's x-coordinate, and set the last point
					# flag as True
					if centroid[0] < conf["speed_estimation_zone"]["A"]:
						to.timestamp["A"] = ts
						to.position["A"] = centroid[0]
						to.lastPoint = True

			# check to see if the vehicle is past the last point and
			# the vehicle's speed has not yet been estimated, if yes,
			# then calculate the vehicle speed and log it if it's
			# over the limit
			if to.lastPoint and not to.estimated:
				# initialize the list of estimated speeds
				estimatedSpeeds = []

				# loop over all the pairs of points and estimate the
				# vehicle speed
				for (i, j) in points:
					# calculate the distance in pixels
					d = to.position[j] - to.position[i]
					distanceInPixels = abs(d)

					# check if the distance in pixels is zero, if so,
					# skip this iteration
					if distanceInPixels == 0:
						continue

					# calculate the time in hours
					t = to.timestamp[j] - to.timestamp[i]
					timeInSeconds = abs(t.total_seconds())
					timeInHours = timeInSeconds / (60 * 60)

					# calculate distance in kilometers and append the
					# calculated speed to the list
					distanceInMeters = distanceInPixels * meterPerPixel
					distanceInKM = distanceInMeters / 1000
					estimatedSpeeds.append(distanceInKM / timeInHours)

				# calculate the average speed
				to.calculate_speed(estimatedSpeeds)

				# set the object as estimated
				to.estimated = True
				print("[INFO] Speed of the vehicle that just passed"\
					" is: {:.2f} MPH".format(to.speedMPH))

		# store the trackable object in our dictionary
		trackableObjects[objectID] = to

		# draw both the ID of the object and the centroid of the
		# object on the output frame
		text = "ID {}".format(objectID)
		cv2.putText(frame, text, (centroid[0] - 10, centroid[1] - 10)
			, cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
		cv2.circle(frame, (centroid[0], centroid[1]), 4,
			(0, 255, 0), -1)

		# check if the object has not been logged
		if not to.logged:
			# check if the object's speed has been estimated and it
			# is higher than the speed limit
			if to.estimated and to.speedMPH > conf["speed_limit"]:
				# set the current year, month, day, and time
				year = ts.strftime("%Y")
				month = ts.strftime("%m")
				day = ts.strftime("%d")
				time = ts.strftime("%H:%M:%S")

				# check if dropbox is to be used to store the vehicle
				# image
				if conf["use_dropbox"]:
					# initialize the image id, and the temporary file
					imageID = ts.strftime("%H%M%S%f")
					tempFile = TempFile()
					cv2.imwrite(tempFile.path, frame)

					# create a thread to upload the file to dropbox
					# and start it
					t = Thread(target=upload_file, args=(tempFile,
						client, imageID,))
					t.start()

					# log the event in the log file
					info = "{},{},{},{},{},{}\n".format(year, month,
						day, time, to.speedMPH, imageID)
					logFile.write(info)

				# otherwise, we are not uploading vehicle images to
				# dropbox
				else:
					# log the event in the log file
					info = "{},{},{},{},{}\n".format(year, month,
						day, time, to.speedMPH)
					logFile.write(info)

				# set the object has logged
				to.logged = True

	# if the *display* flag is set, then display the current frame
	# to the screen and record if a user presses a key
	if conf["display"]:
		cv2.imshow("frame", frame)
		key = cv2.waitKey(1) & 0xFF

		# if the `q` key is pressed, break from the loop
		if key == ord("q"):
			break

	# increment the total number of frames processed thus far and
	# then update the FPS counter
	totalFrames += 1
	fps.update()

# stop the timer and display FPS information
fps.stop()
print("[INFO] elapsed time: {:.2f}".format(fps.elapsed()))
print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))

# check if the log file object exists, if it does, then close it
if logFile is not None:
	logFile.close()

# close any open windows
cv2.destroyAllWindows()

# clean up
print("[INFO] cleaning up...")
vs.release()